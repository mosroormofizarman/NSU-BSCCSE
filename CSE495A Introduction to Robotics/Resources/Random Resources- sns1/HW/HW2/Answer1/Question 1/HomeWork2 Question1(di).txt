import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the time range
t = np.arange(0, 10.1, 0.1)

# Define the basis functions
psi1 = np.ones_like(t)
psi2 = t
psi3 = t**2
psi4 = t**3

# Initial conditions
x1_initial = 1
x2_initial = 1
x3_initial = 0
x1_dot_initial = 1

# Final conditions
x1_final = 5
x2_final = 5
x3_final = 5
x1_dot_final = 1

# Create the matrix A using the basis functions at ti=0 and tf=10
A = np.array([
    [psi1[0], psi2[0], psi3[0], psi4[0]],
    [psi1[-1], psi2[-1], psi3[-1], psi4[-1]],
    [0, 1, 2 * psi2[0], 3 * psi3[0]],
    [0, 1, 2 * psi2[-1], 3 * psi3[-1]],
])

# Define the vector b for initial and final conditions
b = np.array([
    x1_initial,
    x1_final,
    x1_dot_initial,
    x1_dot_final,
])

# Solve for the coefficients alpha
alpha = np.linalg.solve(A, b)

# Evaluate the trajectory and derivatives
x1 = alpha[0] * psi1 + alpha[1] * psi2 + alpha[2] * psi3 + alpha[3] * psi4
x1_dot = alpha[1] + 2 * alpha[2] * t + 3 * alpha[3] * t**2

# Plot the trajectory
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(x1, x1_dot, label='Trajectory')

# Add labels and title
ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_title('Trajectory in the 3D space')

# Add legend and show the plot
ax.legend()
plt.show()
